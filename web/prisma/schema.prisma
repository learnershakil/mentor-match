// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base User model for both students and mentors
model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  phone         String?
  image         String?   // URL to avatar image
  role          UserRole  @default(STUDENT)
  intrest       Interest  @default(WebDevelopment)
  // jobTitle      String?   @default("Student")
  // Expertise     String[]   // Area of expertise for mentors
  bio           String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // review        Float?    @default(0) // 0-5 stars
  // numberOfReviews Int?    @default(0)

  weeklyProgress weeklyProgress[]

  // Relations
  student       Student[]
  mentor        Mentor[]
  messages      Message[]
  notifications Notification[]
}

enum UserRole {
  STUDENT
  MENTOR
  ADMIN
}

// Enum for user interests
enum Interest {
  WebDevelopment
  AiMl
  AppDevelopment
  CyberSecurity
}

// Weekly progress tracking
model weeklyProgress {
  id             String   @id @default(cuid())
  userId         String
  goals          Int?      @default(0) // Goal completion percentage
  Sessions       Int?      @default(0) // Number of completed sessions
  SessionsE      Float?    @default(0)
  projects       Int?      @default(0) // Number of projects completed
  projectsE      Float?    @default(0)
  HoursSpent     Int?      @default(0) // Total hours spent on the platform
  HoursSpentE    Float?    @default(0)
  skills         Int?      @default(0) // Skill improvement percentage
  skillsE        Float?    @default(0)

  subTopics      subTopic[]

  user           User     @relation(fields: [userId], references: [id])
}

// Subtopics for weekly progress
model subTopic {
  id             String   @id @default(cuid())
  weeklyProgressId String
  topic          String
  progress       Int?      @default(0) // Progress percentage
  
  weeklyProgress weeklyProgress @relation(fields: [weeklyProgressId], references: [id])
}

// User notifications
model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  content     String    @db.Text
  type        NotificationType
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id])
}

enum NotificationType {
  ASSIGNMENT
  MESSAGE
  SESSION
  ROADMAP
  SYSTEM
}

// Student-specific information
model Student {
  id                String           @id @default(cuid())
  userId            String           @unique
  learningInterests String[]         // Array of interests
  level             SkillLevel       @default(BEGINNER)
  assignments       Assignment[]
  progress          Progress[]
  events            Events[]
  // roadmap        Roadmap[]
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// Roadmap topics for students
// model Roadmap {
//   id             String   @id @default(cuid())
//   userId         String   @unique
//   topic          Interest
//   title          String
//   description    String   @db.Text
//   resources      resource[]
//   subTopics      subTopic[]
//   progress       Progress[]
  
//   student        Student @relation(fields: [userId], references: [id])
// }

// Resources for each roadmap topic
// model resource {
//   id             String   @id @default(cuid())
//   roadmapId      String
//   title          String
//   description    String   @db.Text
//   progress       Int?     @default(0) // Progress percentage
//   completed      Boolean  @default(false)  
//   data           Json?
//   link           String?

//   roadmap        Roadmap @relation(fields: [roadmapId], references: [id])
// }


// Student progress tracking
model Progress {
  id             String   @id @default(cuid())
  studentId      String
  roadmapTopicId String
  totalSessions  Int      @default(0)
  ts_lastMonth   Int      @default(0)
  learningHours  Int      @default(0)
  lh_lastMonth   Int      @default(0)
  comp_projects  Int      @default(0)
  cp_lastMonth   Int      @default(0)
  skill_mastery  skillMastery[]
  learning_goals learningGoal[]
  projects       project[]
  certificates   certificate[]  
  student        Student  @relation(fields: [studentId], references: [id])
}

// Skill mastery 
model skillMastery {
  id             String   @id @default(cuid())
  progressId     String
  skill          String
  masteryLevel   Int      @default(0) // 0-100%
  
  progress       Progress @relation(fields: [progressId], references: [id])
}

// Learning goals
model learningGoal {
  id             String   @id @default(cuid())
  progressId     String
  goal           String
  target         goalTarget @default(WEEKLY)
  completion     Int      @default(0) // 0-100%
  Due            Int      @default(0) // 0-100%
  due_Type       goalTarget @default(WEEKLY)
  progress       Progress @relation(fields: [progressId], references: [id])
}

// Enum for goal target
enum goalTarget {
  DAILY
  WEEKLY
  MONTHLY
}

// Projects completed by the student
model project {
  id             String   @id @default(cuid())
  progressId     String
  projectName    String
  description    String   @db.Text
  completion     Int      @default(0) // 0-100%
  viewLink       String?
  feedback       String?  @db.Text
  progress       Progress @relation(fields: [progressId], references: [id])
}

// Certificates earned by the student
model certificate {
  id             String   @id @default(cuid())
  progressId     String
  certificateName String
  issueDate      String
  viewLink       String?
  downloadLink   String?
  progress       Progress @relation(fields: [progressId], references: [id])
}


// Mentor-specific information
model Mentor {
  id           String       @id @default(cuid())
  userId       String       @unique
  specialties  String[]     // Array of specialties
  company      String?
  jobTitle     String?
  experience   Int?          // Years of experience
  rating       Float        @default(0)
  reviewCount  Int          @default(0)
  availability Json?
  meetings     MentorMeeting[]
  assignments  Assignment[]
  events       Events[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Mentoring sessions/meetings
model MentorMeeting {
  id           String         @id @default(cuid())
  mentorId     String
  title        String
  description  String?        @db.Text
  startTime    DateTime
  endTime      DateTime
  status       MeetingStatus  @default(SCHEDULED)
  notes        String?        @db.Text
  recordingUrl String?
  category     Interest       @default(WebDevelopment)
  joinLink     String?
  mentorship   Mentor     @relation(fields: [mentorId], references: [id])
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

// Assignments for students
model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  mentorId    String
  studentId   String
  dueDate     DateTime
  submittedAt DateTime?
  grade       String?
  feedback    String?   @db.Text
  status      AssignmentStatus @default(PENDING)
  files       String[]  // URLs to assignment files
  Comments    String?   @db.Text
  createdAt   DateTime  @default(now()) 
  updatedAt   DateTime  @default(now())  // Add default value here
  mentor      Mentor    @relation(fields: [mentorId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
}

enum AssignmentStatus {
  PENDING
  SUBMITTED
  COMPLETED
  LATE
}

model Events {
  id          String    @id @default(cuid())
  studentId   String    // Remove @unique constraint
  mentorId    String    // Remove @unique constraint
  title       String
  description String    @db.Text
  startTime   DateTime
  eventType   EventType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  student     Student   @relation(fields: [studentId], references: [id])
  mentor      Mentor    @relation(fields: [mentorId], references: [id])
}

enum EventType {
  Meeting
  Session
  Deadline
}

// Messaging system
model Message {
  id             String        @id @default(cuid())
  senderId       String
  receiverId     String?
  conversationId String
  content        String        @db.Text
  messageType    MessageType   @default(TEXT)
  sentAt         DateTime      @default(now())
  readAt         DateTime?
  attachments    String[]      // URLs to attached files
  unread         Boolean       @default(false)
  callSessionId  String?       // Reference to a video call session if this is a call message
  sender         User          @relation(fields: [senderId], references: [id])
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  callSession    CallSession?  @relation(fields: [callSessionId], references: [id])
}

// Add MessageType enum
enum MessageType {
  TEXT
  FILE
  CALL_STARTED
  CALL_ENDED
  CALL_MISSED
  SYSTEM
}

// Add CallSession model
model CallSession {
  id             String    @id @default(cuid())
  roomId         String    @unique
  createdAt      DateTime  @default(now())
  endedAt        DateTime?
  duration       Int?      // Duration in seconds
  participants   String[]  // Array of user IDs
  recordingUrl   String?
  messages       Message[]
}

// Conversations between users
model Conversation {
  id          String    @id @default(cuid())
  participants String[]  // Array of user IDs
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
}

model contactUs {
  id          String    @id @default(cuid())
  firstname   String
  lastname    String
  email       String
  subject     subject
  message     String   @db.Text
  createdAt   DateTime @default(now())
}

enum subject {
  GeneralInquiry
  TechnicalSupport
  BillingQuestion
  PartnershipOppurtunity
  Feedback
}